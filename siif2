#!/bin/bash
#
#

setup_colors() {
  # setup colors variable
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

msg() {
  # print a message
  echo >&2 -e "${1-}"
}

die() {
  # print a message and quit
  local msg=$1
  local code=${2-1}
  msg "$msg"
  exit "$code"
}

test_name=""
skip_next=0

group_skip=()

test_cases=()
test_passed=()
test_skipped=()
test_failed=()
failed_tests_outputs=()

log() {
  # helper used to log a test into one of the test arrays and print the test output
  local type="$1"

  test_cases+=("$test_name")

  if [[ "$group_name" != "" ]]; then
    padding="  "
  else
    padding=""
  fi

  case "$type" in
    "-")
      test_passed+=("$test_name")
      symbol="-"
      color="${GREEN}"
      ;;
    "x")
      test_failed+=("$test_name")
      symbol="x"
      color="${RED}"
      ;;
    "s")
      test_skipped+=("$test_name")
      symbol="s"
      color="${BLUE}"
      ;;
  esac

  msg "${padding}${symbol} ${color}${test_name}${NOFORMAT}"

  # reset the test name since it's no longer needed
  reset_test_name
}

is_function() {
  #
  # return 0 if the given string is a defined function, else 1

  for f in $(declare -F); do
    if [[ "$f" == "$1" ]]; then return 0; fi
  done
  return 1
}

ensure_test_name_is_set() {
  #
  # set the variable $test_name with the given string if it's not already set

  if [[ "$test_name" == "" ]]; then 
    if is_function "$1"; then
      test_name="function call: $1"
    else 
      test_name="expression: $1"
    fi
  fi
}

reset_test_name() {
  #
  # reset the next test name

  test_name=""
}

skip() {
  #
  # skip the next test

  skip_next=1
}

assert(){
  #
  # TODO

  assert_file="assert"
  local cmd="$@"

  ensure_test_name_is_set "$cmd"

  if [ $skip_next -eq 1 ]; then
    # Skip the test
    skip_next=0
    log "s"
    return 1

  else
    # Do the test

    (eval "$cmd" >$assert_file 2>&1)

    assert_exit_code="$?"
    assert_output="$(cat $assert_file)"

    rm -f $assert_file

    if [[ $assert_exit_code -eq 0 ]]; then
      log "-"
      return 0
    else
      failed_tests_exit_codes+=("$assert_exit_code")
      failed_tests_outputs+=("$assert_output")
      log "x"
      return 1
    fi
  fi

}

describe() {
  #
  # Used to group tests.

  group_name="$1"

  msg ""

  if [[ "$1" != "" ]]; then 
    msg "$group_name:"
  fi
}

it() {
  #
  # set the name for the next test

  test_name="it $@"
}

#
# BEGIN AND END TEST RUN FUNCTIONS
#

begin_test_run() {
  msg "Running the test suite..."
}

end_test_run() {
  #
  # Print the run report and exit accordingly

  if [ ${#test_skipped[@]} -eq 0 ]; then
    skipped=""
  else
    skipped="${BLUE} skipped: ${#test_skipped[@]}${NOFORMAT}"
  fi

  if [ ${#test_passed[@]} -eq 0 ]; then
    passed=""
  else
    passed="${GREEN} passed: ${#test_passed[@]}${NOFORMAT}"
  fi

  if [[ ${#test_failed[@]} -eq 0 ]] && [[ ${#test_passed[@]} -eq 0 ]] && [[ ${#test_skipped[@]} -eq 0 ]]; then
    die "\nNo test found."
  fi

  if [ ${#test_failed[@]} -eq 0 ]; then
    msg "\n${GREEN}[OK]${passed}${skipped}${NOFORMAT}"
    exit
  else

    msg "\n ${RED}ERRORS${NOFORMAT} "
    msg "--------"

    for index in "${!test_failed[@]}"; do
      msg "\n--- [ ${RED}${test_failed[$index]}${NOFORMAT} ] failed: ${RED}${failed_tests_exit_codes[$index]}${NOFORMAT}"
      if [[ "${failed_tests_outputs[$index]}" == "" ]]; then
        msg "no output"
      else
        msg "${failed_tests_outputs[$index]}"
      fi

    done

    die "\n${RED}[ERR] failed: ${#test_failed[@]}${passed}${skipped}${NOFORMAT}"
  fi
}

that_it_should_do() {
  if [[ "$1" == "that" ]]; then return 1; else return 0; fi
}

# TODO
# test runner
# tests
# skip group
# run
# runs
# assert su run

setup_colors


describe "a group"
{

  assert [[ -d /home/cik ]]

  assert that_it_should_do "that"

  assert that_it_should_do "this"

  it "should not work"
  assert [[ -d /home/git ]]

  skip
  it "should work"
  assert [[ -d /etc ]]

}

describe "anoher group"
{
  assert [[ -d /tmp ]]

  assert [[ -d /home/git ]]
}
describe

assert ls banana

end_test_run
